CREATE TABLE public.credits (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  credits integer NULL DEFAULT 1,
  user_id uuid NOT NULL,
  CONSTRAINT credits_pkey PRIMARY KEY (id),
  CONSTRAINT credits_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);

CREATE TABLE public.galleries (
  id uuid NOT NULL DEFAULT extensions.uuid_generate_v4(),
  user_id uuid NULL,
  share_id text NULL,
  name text NULL,
  created_at timestamp with time zone NULL DEFAULT timezone('utc'::text, now()),
  image_ids integer[] NULL,
  CONSTRAINT galleries_pkey PRIMARY KEY (id),
  CONSTRAINT galleries_share_id_key UNIQUE (share_id),
  CONSTRAINT galleries_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);

CREATE TABLE public.images (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  "modelId" bigint NOT NULL,
  uri text NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  share_id uuid NULL DEFAULT extensions.uuid_generate_v4(),
  is_public boolean NULL DEFAULT false,
  CONSTRAINT images_pkey PRIMARY KEY (id),
  CONSTRAINT unique_share_id UNIQUE (share_id),
  CONSTRAINT images_modelId_fkey FOREIGN KEY ("modelId") REFERENCES models(id) ON DELETE CASCADE
);
CREATE INDEX IF NOT EXISTS idx_images_share_id ON public.images USING btree (share_id);

CREATE TABLE public.messages (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  content text NOT NULL,
  role text NOT NULL,
  session_id uuid NULL,
  CONSTRAINT messages_pkey PRIMARY KEY (id),
  CONSTRAINT messages_session_id_fkey FOREIGN KEY (session_id) REFERENCES chat_sessions(id) ON DELETE CASCADE
);

CREATE TABLE public.models (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  name text NULL,
  type text NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  user_id uuid NULL,
  status text NOT NULL DEFAULT 'processing'::text,
  "modelId" text NULL,
  CONSTRAINT models_pkey PRIMARY KEY (id),
  CONSTRAINT models_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE
);

CREATE TABLE public.profiles (
  id uuid NOT NULL,
  updated_at timestamp with time zone NULL,
  username text NULL,
  full_name text NULL,
  avatar_url text NULL,
  website text NULL,
  email text NULL,
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_username_key UNIQUE (username),
  CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE,
  CONSTRAINT username_length CHECK ((char_length(username) >= 3))
);

CREATE TABLE public.samples (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  uri text NOT NULL,
  "modelId" bigint NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT samples_pkey PRIMARY KEY (id),
  CONSTRAINT samples_modelId_fkey FOREIGN KEY ("modelId") REFERENCES models(id) ON DELETE CASCADE
);